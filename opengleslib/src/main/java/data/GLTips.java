package data;

public interface GLTips
{
    /**
     * 这个类仅记录一些个人的理解、认知，不是一定正确
     *
     * 1、Open GL 的坐标轴是 三维 的，x\y\z ，而且是右手法则，右手掌心面向自己，分别的正方向是 x: 大拇指向右的方向 ， y: 食指向上的方向， z: 中指指向自己的方向
     *
     * 2、定义的 顶点坐标(x, y, z) 其实并非一定是 [-1, 1], 可以是 任何数值
     *          网上很多资料都定义 [-1, 1] 的原因 : 一般的博客代码, 近平面 的 (left, right, bottom, top) 都会定义成 (-屏幕宽高比, 屏幕宽高比, -1, 1) or (-1, 1, -1 / 屏幕宽高比, 1 / 屏幕宽高比)
     *          那么实际上, 在三维坐标系中的近平面大小就是 (-屏幕宽高比, 屏幕宽高比, -1, 1) --> (-1 * 比例, 1 * 比例, -1, 1), 这样 [-1, 1] 总会是某一个轴上的顶点
     *
     * 2、Open GL 最终呈现在手机屏幕上的内容，其实就是近平面所能观察到的内容 (在 三维坐标系 (世界坐标系) 中 被定义的一个平面)
     *
     * 3、但是 Open GL 是三维的，手机屏幕是二维，那么，呈现的内容必然会经过坐标系、点的映射：
     *      Open GL 三维坐标上的点，首先会被映射到 一个标准的立方体(边长：2, 三个轴的坐标范围都是 [-1, 1]){ https://blog.csdn.net/wangdingqiaoit/article/details/51589825 }
     *      其中，立方体是不变的 (这个立方体的坐标系，也叫归一化坐标), 立方体有三个轴，x'\y'\z'， 其中原点 (0, 0, 0) 是在 立方体 内部中心
     *      并且 立方体 的坐标系，是左手法则，左手手背面向自己，分别的正方向是: x: 大拇指向右的方向， y : 食指向上的方向， z: 中指指向 眼睛看东西的方向
     *
     *      ~~~~ 而 近平面 与 立方体 的关系， 我的理解是：将 近平面 压缩 进 立方体中（宽高非等比例压缩）
     *
     *      近平面的 left\right 映射到 立方体x'轴 的 [-1, 1], 近平面的 bottom\top 映射到 立方体y'轴的 [-1, 1], 近平面的 near\ 远平面 far 映射到 立方体z'轴的 [-1, 1]
     *      经过 三维 --> 二维 的变换、映射后, 在立方体中的点，就是最终要画到屏幕上的点
     *
     * 4、
     *  视口是一个矩形窗口区域。是OpenGL渲染操作最终显示的地方
     *  x, y 是渲染的起点，0，0 是屏幕左上角
     *  GLES20.glViewport(0, 0, width, height);
     *  float sWidthHeight = width / (float) height;
     *  Matrix.frustumM(f, 0, -10f, 10f, -10f / sWidthHeight, 10f / sWidthHeight, 3.0f, 5.0f);
     *      参数：
     *      {
     *          Matrix f: 用来接收数据的矩阵
     *          int offset: 矩阵中接收数据的起始位置偏移量
     *          // 近平面 其实是一个 矩形, ( 近平面 应该理解为 三维空间中的平面 )
     *          // 下面是决定近平面大小(面积、形状、宽高比例) 的四个参数, left\right\bottom\top 是基于 x|y 轴 的参数
     *          // 以下 4 个点都是基于 近平面 中心点讨论 ( 数值上，可以是任何数值，不一定是 -1f -> 1f 如上述例子)
     *          // x\y 轴的参数
     *          float left: 以中心点为基础的左边距 --> 负数
     *          float right: 以中心点为基础的右边距 --> 正数
     *          float bottom: 以中心点为基础的下边距 --> 负数
     *          float top: 以中心点为基础的上边距 --> 正数
     *
     *          // near\far 是基于 z 轴的参数, 只有处于 远近平面 之间的物体，才是可见的
     *          float near: 近平面 在 z 轴的位置
     *          float far: 远平面 在 z 轴的位置
     *      }
     */
}
