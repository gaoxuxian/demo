
纹理坐标：
        simple2D 的图片，很多大神博客一般用 UV 坐标表示，那么 UV 坐标是什么意思？ 简单的说，就是贴图影射到模型表面的依据。完整的说，应该是 UVW 坐标系。

        U 和V 分别是图片在显示器水平、垂直方向上的坐标，( 也可以笼统的理解为数学平面坐标系的 x,y 轴) 取值一般都是 0~1，
            也 就是 ( 水平方向的第U个像素/图片宽度，垂直方向的第V个像素/图片高度 )。

        那W呢？W的方向垂直于显示器表面，一般 用于程序贴图或者某些3D贴图技术( 记住，确实有三维贴图这种概念！)

            一般的定义，UV 坐标 U 的正方向朝右， V 的正方向朝上，也就是与数学上的 二维坐标系 x 轴和 y 轴方向一致，( 暂时统称为：标准 UV 坐标 )
        而图片起点 一般定义为 UV 坐标系原点, 所以，大家都说 simple2D 图片的纹理坐标原点(0, 0) 是在 图片左下角！！！！

        但是，在 Android 平台上，UV 坐标系，y 轴坐标的正方向，刚好是相反的，所以在 Android 平台上，纹理坐标原点(0, 0)是在图片左上角



        现象: 有一张 bitmap, 使用Canvas 绘制到屏幕时, 方向正确, 将这样一张 bitmap 直接 upload 到 GPU 生成纹理A，用 GL 将纹理A 直接画到屏幕

        已知条件: 顶点着色器的顶点矩阵 == 单位矩阵，顶点坐标数组 == float[] { -1.0f, 1.0f,      纹理坐标数组 == float[] { 0.0f, 1.0f,
                                                                        1.0f, 1.0f,                                1.0f, 1.0f,
                                                                        1.0f, -1.0f,                               1.0f, 0.0f,
                                                                        -1.0f, -1.0f };                            0.0f, 0.0f };
        问题:  用 GL 绘制的纹理方向跟用 Canvas 绘制的图片方向一致吗?

        答案:  就已知条件而言, 不考虑缩放比例的问题, 单从图片方向讨论，应该是不一致的。为什么呢?

        原因:
              上面提到, 标准 UVW 坐标 是 左下角(0, 0), 右上角(1, 1), 但android 平台, V 正方向刚好是与标准相反, 所以, 图片被读取到 GPU 当作纹理的过程,
              对于图片而言, 通过 流 的方式一行一行读取图片数据到 GPU, 而起点是 android 平台的 图片左上角 开始,
              对于 GPU 纹理而言, 接受到 android 端 图片流 的数据后, 需要将数据一行一行映射到 纹理 内存空间里,
              而 GPU 纹理的起点是 标准 UVW 坐标起点, 所以, 图片在上传 GPU 的过程中, 已经做了一次反转，
              也就是说，纹理 与 图片 的方向已经是相反了


